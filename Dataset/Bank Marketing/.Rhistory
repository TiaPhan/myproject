q()
installed.packages()
install.packages(tidyverse)
install.packages("tidyverse")
data(penguins)
install.packages("Warning Messages")
data(AdultUCI)
library(arules)
data("AdultUCI")
uci=AdultUCI
View(uci)
class(age)
class('age')
supresswarnings(as.numeric(age))
supressWarnings(as.numeric(age))
warning(as.numeric(age))
warning(as.numeric('age'))
age
"age"
as.numeric(age)
as.numeric('age')
uci[["age"]]=ordered(cut(uci[[ "age"]], c(15,25,45,65,100)),labels = c("Young", "Middle-aged", "Senior", "Old"))
uci[["hours_per_week"]]=ordered(cut(uci[["hours_per_week"]],c(0,25,40,60,168),labels = c("Part-time","Full-time","Over-time","Workaholic"))
uci[["capital_gain"]]=ordered(cut(uci[["capital_gain"]][uci[["captal_gain"]]>0),Inf)),labels=c("None","Low","High"))
uci[["age"]]=ordered(cut(uci[[ "age"]], c(15,25,45,65,100)),labels = c("Young", "Middle-aged", "Senior", "Old"))
uci[["hours_per_week"]]=ordered(cut(uci[["hours_per_week"]],c(0,25,40,60,168),labels = c("Part-time","Full-time","Over-time","Workaholic"))
uci[["capital_gain"]]=ordered(cut(uci[["capital_gain"]][uci[["captal_gain"]]>0),Inf)),labels=c("None","Low","High"))
summary(uci)
uci[["hours_per_week"]]=ordered(cut(uci[["hours_per_week"]],c(0,25,40,60,168),labels = c("Part-time","Full-time","Over-time","Workaholic"))
uci[["capital_gain"]]=ordered(cut(uci[["capital_gain"]][uci[["captal_gain"]]>0),Inf)),labels=c("None","Low","High"))
uci[["hours_per_week"]]=ordered(cut(uci[["hours_per_week"]],c(0,25,40,60,168)),labels = c("Part-time","Full-time","Over-time","Workaholic"))
uci[["capital_gain"]]=ordered(cut(uci[["capital_gain"]][uci[["captal_gain"]]>0),Inf)),labels=c("None","Low","High"))
uci[["capital-gain"]]=ordered(cut(uci[["capital-gain"]][uci[["captal-gain"]]>0),Inf)),labels=c("None","Low","High"))
uci[["capital-gain"]]=ordered(cut(uci[["capital-gain"]],c(-Inf,0,median(uci[["capital-gain"]][uci[["captal-gain"]]>0),Inf)),labels=c("None","Low","High"))
summary(uci)
uci[["hours_per_week"]]=ordered(cut(uci[["hours_per_week"]],c(0,25,40,60,168)),labels = c("Part-time","Full-time","Over-time","Workaholic"))
as.numeric('hours_per_week')
uci[["hours_per_week"]]=ordered(cut(uci[["hours_per_week"]],c(0,25,40,60,168)),labels = c("Part-time","Full-time","Over-time","Workaholic"))
library(Warning Messages)
library("Warning Messages")
class(hours_per_week)
class('hours_per_week')
uci[["hours_per_week"]]=ordered(cut(uci[[ "hours_per_week"]], c(0,25,40,60,168)),labels = c("Part-time","Full-time","Over-time","Workaholic"))
as.numeric('hours_per_week')
warning(as.numeric('hours_per_week'))
supresswarning(as.numeric('hours_per_week'))
as.factor(uci$`hours-per-week`)
uci[["hours_per_week"]]=ordered(cut(uci[[ "hours_per_week"]], c(0,25,40,60,168)),labels = c("Part-time","Full-time","Over-time","Workaholic"))
as.numeric(uci$`hours-per-week`)
uci[["hours_per_week"]]=ordered(cut(uci[[ "hours_per_week"]], c(0,25,40,60,168)),labels = c("Part-time","Full-time","Over-time","Workaholic"))
age
uci$age
class(age)
class('age')
uci[["hours-per-week"]]=ordered(cut(uci[["hours-per-week"]],c(0,25,40,168)),labels=c("Part-time","Full-time","Over-time","Workaholic"))
uci[["hours-per-week"]]=ordered(cut(uci[["hours-per-week"]],c(0,25,40,60,168)),labels=c("Part-time","Full-time","Over-time","Workaholic"))
uci[["capital-gain"]]=ordered(cut(uci[["capital-gain"]],c(-Inf,0,median(uci[["capital-gain"]][uci[["captal-gain"]]>0),Inf)),labels=c("None","Low","High"))
uci[["capital-gain"]]=ordered(cut(uci[["capital-gain"]],c(-Inf,0,median(uci[["capital-gain"]],Inf)),labels=c("None","Low","High"))
uci[["capital-gain"]]=ordered(cut(uci[["capital-gain"]],c(-Inf,0,median(uci[["capital-gain"]],Inf)),labels=c("None","Low","High"))
uci[["capital-gain"]]=ordered(cut(uci[["capital-gain"]],c(-Inf,0,median(uci[["capital-gain"]][uci[["capital-gain"]]>0],Inf)),labels=c("None","Low","High"))
uci[["capital-gain"]]=ordered(cut(uci[["capital-gain"]],c(-Inf,0,median(uci[["capital-gain"]][uci[["capital-gain"]]>0],Inf)),labels=c("None","Low","High"))
uci[["capital-gain"]]=ordered(cut(uci[["capital-gain"]],c(-Inf,0,median(uci[["capital-gain"]][uci[["capital-gain"]]>0],Inf)),labels=c("None","Low","High"))
uci[["capital-gain"]]=ordered(cut(uci[["capital-gain"]],c(-Inf,0,median(uci[["capital-gain"]][uci[["capital-gain"]]>0],Inf)),labels=c("None","Low","High"))
uci[["capital-gain"]]=ordered(cut(uci[["capital-gain"]],c(-Inf,0,median(uci[["capital-gain"]],Inf),labels=c("None","Low","High"))
summary(uci)
summary(uci)
uci[["capital-gain"]]=ordered(cut(uci[["capital-gain"]],c(-Inf,0,median(uci[["capital-gain"]][uci[[capital-gain]]>0],Inf),labels=c("None","Low","High"))
uci[["capital-gain"]]=ordered(cut(uci[["capital-gain"]],c(-Inf,0,median(uci[["capital-gain"]][uci[[capital-gain]]>0],Inf),labels=c("None","Low","High"))
AdultUCI[[ "capital-gain"]] <- ordered(cut(AdultUCI[[ "capital-gain"]],
+ c(-Inf,0,median(AdultUCI[[ "capital-gain"]][AdultUCI[[ "capital-gain"]]>0]),Inf)),labels = c("None", "Low", "High"))
uci[[ "capital-gain"]] <- ordered(cut(uci[[ "capital-gain"]],c(-Inf,0,median(uci[[ "capital-gain"]][uci[[ "capital-gain"]]>0]),Inf)),labels = c("None", "Low", "High"))
uci(1:2,)
data("AdultUCI")
library('arules')
data("AdultUCI")
uci=AdultUCI
uci(1:2,)
uci[1:2,]
uci(1:2)
uci[1:2]
uci[["fnlwgt"]] = NULL
uci[["education-num"]] = NULL
uci[["age"]] = ordered(cut(uci[["age"]], c(15,25,45,65,100)), labels=c("Young","Middle-age","Senior","Old"))
uci[["hours-per-week"]] = ordered(cut(uci[["hours-per-week"]], c(0,25,40,60,168)), labels=c("Part-time", "Full-time","Overtime","Workaholic"))
uci[["capital-gain"]] = ordered(cut(uci[["capital-gain"]], c(-Inf,0, median(uci[["capital-gain"]][uci[["capital-gain"]]>0]), Inf)), labels=c("None", "Low", "High"))
uci[["capital-loss"]] = ordered(cut(uci[["capital-loss"]],c(-Inf,0,median(uci[["capital-loss"]][uci[["capital-loss"]]>0]),Inf)), labels=c("None", "Low", "High"))
str(uci)
adult=(uci,"transaction")
adult=as(uci,"transaction")
adult=as(uci,"transactions")
summary(adult)
itemFrequencyPlot(adult)
window()
itemFrequencyPlot(adult)
window()
windows()
itemFrequencyPlot(adult)
windows()
itemFrequencyPlot(adult)
rules=apriori(adult,parameter = list(supp=0.01, conf=0.06 ))
rules_income_small=subset(rules,subset = rhs%in% "income=small"&lift>1.2)
rules_income_large=subset(rules,subset = rhs%in% "income_large"&lift>1.2)
rules_income_large=subset(rules,subset = rhs%in% "income=large"&lift>1.2)
inspect(head(rules_income_small, n=3, by = "confidence")
show(rules_income_small)
inspect(head(rules_income_small, n=3, by = "confidence"))
rules_income_small
inspect(head(rules_income_large, n=3, by = "confidence"))
inspect(head(rules_income_small, n=3, by = "confidence"))
knitr::opts_chunk$set(echo = TRUE)
inspect(head(rules_income_small, n=3, by = "confidence"))
data("retail")
plot("retail")
library(ggplot2)
plot("retail")
View("retail")
data("Retail Market Basket ")
data("Retail Market")
install.packages(packrat)
install.packages("packrat")
library(C50)
computer=read.csv("da_computer3.txt")
attach(computer)
?attach  #attach your database to R
?na.omit #removed all NAs
ff=na.omit(computer)
ftree=tree(age~., data=ff);ftree
names(ff)
prop.table(table(ff$buy)) #buying percentage in ff dataset
install.packages("tree")
library(tree)
?trees
library(dplyr)
library(tidyr)
ff=ff%>%separate(edu.age.marri.income.city.buy, c("edu","age","marri","income","city","buy"))
names(ff)
ftree=tree(buy~.,data=ff);ftree
summary(ftree)
class(ftree)
head(ftree)
plot(ftree)
text(ftree)
show(ftree)
ind <- sample(2,nrow(ff),replace=TRUE,prob=c(0.7,0.3)) #The common practice is to split the data 80/20, 80 percent of the data serves to train the model, and 20 percent to make predictions.
?sample
traindata <- ff[ind==1,]
traindata
testdata = ff[ind==2,]
testdata
create_buy_test <- function(ff, size = 0.8, buy = TRUE) {
n_row = nrow(ff)
total_row = size * n_row
buy_sample < - 1: total_row
if (train == TRUE) {
return (data[ff, ])
} else {
return (data[-ff, ])
}
}
data_test <- create_buy_test(buy, 0.8, buy = FALSE)
prop.table(table(traindata$buy)) #buying percentage in traindata set
install.packages("rpart")    #regression plot
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
fit <- rpart(buy~., data = traindata, method = 'class')
rpart.plot(fit, extra = 106)
predict_unseen <-predict(fit, testdata, type = 'class')  #predict which passengers are more likely to survive after the collision from the test set. It means, you will know among those 209 passengers, which one will buy or not.
table_mat <- table(testdata$buy, predict_unseen)
install.packages("rpart")
COVID19_line_list_data <- read.csv("C:/Users/Tia Phan/Downloads/COVID19_line_list_data.csv")
View(COVID19_line_list_data)
data<- read.csv("C:/Users/Tia Phan/Downloads/COVID19_line_list_data.csv")
describe(data)
install.packages(Hmisc)
install.packages("Hmisc")
install.packages("Hmisc")
data<- read.csv("C:/Users/Tia Phan/Downloads/COVID19_line_list_data.csv")
describe(data)
describe
library(Hmisc)
describe(data)
data$death_dummy=as.integer(data$death != 0)
dead=subset(data,death_dummy==1)
alive=subset(data,death_dummy==0)
mean(dead$age)
mean(dead$age, na.rm = TRUE)
mean(alive$age, na.rm=TRUE)
t.test(dead$sge,alive$age,alternative="two.sided",conf.level=0.99)
t.test(dead$age,alive$age,alternative="two.sided",conf.level=0.99)
t.test(dead$age,alive$age,alternative="two.sided",conf.level=0.5)
male=subset(data,gender=="male")
female=subset(data,gender=="female")
mean(female$death_dummy)
mean(male$death_dummy)
t.test(male$death_dummy,female$death_dummy,alternative = "two.sided",conf.level = 0.95)
survey=read_excel('Survey.xlxs')
survey=read.xlsx('Survey.xlsx')
install.packages("tseries")
install.packages("timeSeries")
install.packages("forecast")
tw0050 <- getSymbols("0050.TW", auto.assign = FALSE, from="2021-05" ,to="2022-05-01")
tw0050 <- getSymbols("0050.TW", auto.assign = FALSE, from="2020-05" ,to="2022-05")
tw0050 <- getSymbols("0050.TW", auto.assign = FALSE, from="2020-05" to="2022-05")
tw0050 <- getSymbols("0050.TW", auto.assign = FALSE, from="2000-01-01" ,to="2022-05-01")
tw0050 <- getSymbols("0050.TW", auto.assign = FALSE, from="2000-01-01" ,to="2022-05-01")
install.packages("tseries")
install.packages("timeSeries")
install.packages("forecast")
sp500=new.env()
gspc <- getSymbols("GSPC", env = sp500, src = "yahoo", from = as.Date("1960-01-04"), to = as.Date("2009-01-01"))
library(quantmod)
sp500=new.env()
gspc <- getSymbols("GSPC", env = sp500, src = "yahoo", from = as.Date("1960-01-04"), to = as.Date("2009-01-01"))
install.packages('mlr3')
library(mlr3)
setwd("C:/Users/Tia Phan/OneDrive/Máy tính/a/Dataset/Bank Marketing")
library(readr)
bank<- read_delim("C:/Users/Tia Phan/OneDrive/Máy tính/a/Dataset/Bank Marketing/bank-additional-full.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
bank1=na.omit(bank)
distinct(bank1, y)
View(bank1)
library(C50)
library(tree)
traindata <- bank1[ind==1,]
testdata <-  bank1[ind==2,]
ind <- sample(2,nrow(bank1),replace=TRUE,prob=c(0.7,0.3))
traindata <- bank1[ind==1,]
testdata <-  bank1[ind==2,]
ftree=tree(y~.,data=traindata);ftree
ftree=tree(y~.,data=bank1);ftree
pred <- predict(ftree, testdata[,])
pred <- predict(ftree, testdata)
library(DMwR2)
dm=sample(1:nrow(bank1),as.integer(0.7*nrow(bank1)))
trainDm=bank1[dm,]
testDm=bank1[-dm,]
nn3=kNN(y~.,trainDm,testDm,cl=bank1$y,k=3)
class(y)
class(bank1$y)
bank1$y=as.numeric(bank1$y)
class(bank1$y)
nn3=kNN(y~.,trainDm,testDm,cl=bank1$y,k=3)
ind <- sample(2,nrow(bank1),replace=TRUE,prob=c(0.7,0.3))
traindata <- bank1[ind==1,]
testdata <-  bank1[ind==2,]
ftree=tree(y~.,data=bank1);ftree
ftree=tree(y~.,data=traindata);ftree
ftree=tree(y~.,data=traindata)
install.packages("MASS")
install.packages("caTools")
install.packages("neuralnet")
install.packages("knitr")
library(MASS)
library(caTools)
library(neuralnet)
library(ggplot2)
library(knitr)
